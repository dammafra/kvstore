[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\src\main\scala\kvstore\Replica_bak.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\src\main\scala\kvstore\Replica.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$leader$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$replicating$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$8.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$applyOrElse$10$$anonfun$apply$2.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$applyOrElse$6.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$OperationFailed.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$receive$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$applyOrElse$9$$anonfun$apply$1$$anonfun$9.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$2.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$receive$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$GetResult.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$replica$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$Insert.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$props$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$applyOrElse$10.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$receivingReplicas$1$$anonfun$applyOrElse$2.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$receivingReplicas$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$6.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$OperationAck$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$kvstore$Replica_bak$$replicate$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$applyOrElse$5.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$OperationFailed.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$3$$anonfun$applyOrElse$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$OperationAck.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$GetResult$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$Remove$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$receivingReplicas$1$$anonfun$applyOrElse$2$$anonfun$apply$2.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$applyOrElse$9$$anonfun$apply$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$receivingTimeout$1$$anonfun$applyOrElse$3.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$Remove$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$3$$anonfun$applyOrElse$4.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$Remove.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$OneSecondTimeMachine$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$Get.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$OperationFailed$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$OneSecondTimeMachine.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$applyOrElse$9.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$receivingReplicas$1$$anonfun$applyOrElse$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$3.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$OperationAck$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$Remove.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$3$$anonfun$applyOrElse$3.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$3$$anonfun$applyOrElse$2.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$Get.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$receivingReplicas$1$$anonfun$applyOrElse$1$$anonfun$apply$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$receivingTimeout$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$applyOrElse$8.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$Insert.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$Insert$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$receivingGet$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$GetResult.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$updatePending$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$Get$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$7.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$updatePrimary$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$GetResult$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$4$$anonfun$applyOrElse$7.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$props$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$OperationFailed$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$$anonfun$persisting$1.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$OperationAck.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$OperationReply.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$Operation.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$Operation.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$Insert$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica_bak$OperationReply.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$Get$.class, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes\kvstore\Replica$$anonfun$5.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(kvstore.Replica.OperationAck, kvstore.Replica, kvstore.Replica_bak.OperationFailed, kvstore.Replica_bak.OperationReply, kvstore.Replica_bak.Operation, kvstore.Replica.Insert, kvstore.Replica.Operation, kvstore.Replica.GetResult, kvstore.Replica.Remove, kvstore.Replica_bak.Get, kvstore.Replica_bak.Insert, kvstore.Replica_bak.GetResult, kvstore.Replica.Get, kvstore.Replica.OneSecondTimeMachine, kvstore.Replica.OperationReply, kvstore.Replica_bak.Remove, kvstore.Replica_bak, kvstore.Replica.OperationFailed, kvstore.Replica_bak.OperationAck)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\src\main\scala\kvstore\Replica_bak.scala, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\src\main\scala\kvstore\Replica.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(kvstore.Replica.OperationAck, kvstore.Replica, kvstore.Replica_bak.OperationFailed, kvstore.Replica_bak.OperationReply, kvstore.Replica_bak.Operation, kvstore.Replica.Insert, kvstore.Replica.Operation, kvstore.Replica.GetResult, kvstore.Replica.Remove, kvstore.Replica_bak.Get, kvstore.Replica_bak.Insert, kvstore.Replica_bak.GetResult, kvstore.Replica.Get, kvstore.Replica.OneSecondTimeMachine, kvstore.Replica.OperationReply, kvstore.Replica_bak.Remove, kvstore.Replica_bak, kvstore.Replica.OperationFailed, kvstore.Replica_bak.OperationAck)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\src\main\scala\kvstore\Replica.scala, C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\src\main\scala\kvstore\Replica_bak.scala)[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 1 Scala source to C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.11:1.1.7:compile for Scala 2.11.12[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.11:1.1.7:compile for Scala 2.11.12[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 66303074 for Scala compiler version 2.11.12[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-feature[0m
[0m[[0m[0mdebug[0m] [0m[0m	-deprecation[0m
[0m[[0m[0mdebug[0m] [0m[0m	-encoding[0m
[0m[[0m[0mdebug[0m] [0m[0m	UTF-8[0m
[0m[[0m[0mdebug[0m] [0m[0m	-unchecked[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xlint[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Yno-adapted-args[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Ywarn-dead-code[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Ywarn-value-discard[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xfuture[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xexperimental[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Program Files\Java\jre1.8.0_221\lib\resources.jar;C:\Program Files\Java\jre1.8.0_221\lib\rt.jar;C:\Program Files\Java\jre1.8.0_221\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_221\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_221\lib\jce.jar;C:\Program Files\Java\jre1.8.0_221\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_221\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_221\classes;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-library\2.11.12\scala-library-2.11.12.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Users\Francesco Dammacco\workspaces\edx\programming-reactive-systems\kvstore\target\scala-2.11\classes;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\akka\akka-stream-typed_2.11\2.5.21\akka-stream-typed_2.11-2.5.21.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest_2.11\3.0.5\scalatest_2.11-3.0.5.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\akka\akka-actor_2.11\2.5.21\akka-actor_2.11-2.5.21.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\akka\akka-stream_2.11\2.5.21\akka-stream_2.11-2.5.21.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-reflect\2.11.12\scala-reflect-2.11.12.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-xml_2.11\1.0.6\scala-xml_2.11-1.0.6.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\akka\akka-actor-typed_2.11\2.5.21\akka-actor-typed_2.11-2.5.21.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\reactivestreams\reactive-streams\1.0.2\reactive-streams-1.0.2.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\config\1.3.3\config-1.3.3.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scalactic\scalactic_2.11\3.0.5\scalactic_2.11-3.0.5.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-parser-combinators_2.11\1.1.1\scala-parser-combinators_2.11-1.1.1.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\akka\akka-protobuf_2.11\2.5.21\akka-protobuf_2.11-2.5.21.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-java8-compat_2.11\0.7.0\scala-java8-compat_2.11-0.7.0.jar;C:\Users\Francesco Dammacco\AppData\Local\Coursier\cache\v1\https\repo1.maven.org\maven2\com\typesafe\ssl-config-core_2.11\0.3.7\ssl-config-core_2.11-0.3.7.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 5.725954101 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from kvstore.Replica_bak.Remove...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(kvstore.Replica_bak.Remove)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(kvstore.Replica_bak.Remove)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(kvstore.Replica_bak.Remove,ModifiedNames(changes = UsedName(copy$default$2,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(Remove,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(kvstore;Replica_bak;Remove;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(key,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(curried,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The kvstore.Replica_bak.Remove has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy$default$2,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(Remove,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(kvstore;Replica_bak;Remove;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(key,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(curried,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(kvstore.Replica_bak.Remove)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from kvstore.Replica.OneSecondTimeMachine...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(kvstore.Replica.OneSecondTimeMachine)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(kvstore.Replica.OneSecondTimeMachine)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(kvstore.Replica.OneSecondTimeMachine,ModifiedNames(changes = UsedName(copy$default$2,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(client,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(OneSecondTimeMachine,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(curried,[Default]), UsedName(kvstore;Replica;OneSecondTimeMachine;init;,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The kvstore.Replica.OneSecondTimeMachine has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy$default$2,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(client,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(OneSecondTimeMachine,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(curried,[Default]), UsedName(kvstore;Replica;OneSecondTimeMachine;init;,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(kvstore.Replica.OneSecondTimeMachine)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from kvstore.Replica_bak.Insert...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(kvstore.Replica_bak.Insert)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(kvstore.Replica_bak.Insert)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(kvstore.Replica_bak.Insert,ModifiedNames(changes = UsedName(copy$default$2,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(kvstore;Replica_bak;Insert;init;,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isInstanceOf,[Default]), UsedName(value,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(key,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(curried,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(Insert,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(copy$default$3,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The kvstore.Replica_bak.Insert has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy$default$2,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(kvstore;Replica_bak;Insert;init;,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isInstanceOf,[Default]), UsedName(value,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(key,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(curried,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(Insert,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(copy$default$3,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(kvstore.Replica_bak.Insert)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from kvstore.Replica...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(kvstore.Replica)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(kvstore.Replica)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(kvstore.Replica,ModifiedNames(changes = UsedName(receivingGet,[Default]), UsedName(cancellable,[Default]), UsedName(receivingReplicas,[Default]), UsedName(leader,[Default]), UsedName(resolvePending,[Default]), UsedName(replications,[Default]), UsedName(replica,[Default]), UsedName(replicators,[Default]), UsedName(persists,[Default]), UsedName(replicating,[Default]), UsedName(updatePrimary,[Default]), UsedName(pendingRequests,[Default]), UsedName(receivingTimeout,[Default]), UsedName(OneSecondTimeMachine,[Default]), UsedName(persisting,[Default]), UsedName(secondaries,[Default]), UsedName(update,[Default]), UsedName(replicationClients,[Default]), UsedName(persistence,[Default]), UsedName(replicasToReplicators,[Default]), UsedName(getting,[Default]), UsedName(updatePending,[Default]), UsedName(persist,[Default]))) invalidates 1 classes due to The kvstore.Replica has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(receivingGet,[Default]), UsedName(cancellable,[Default]), UsedName(receivingReplicas,[Default]), UsedName(leader,[Default]), UsedName(resolvePending,[Default]), UsedName(replications,[Default]), UsedName(replica,[Default]), UsedName(replicators,[Default]), UsedName(persists,[Default]), UsedName(replicating,[Default]), UsedName(updatePrimary,[Default]), UsedName(pendingRequests,[Default]), UsedName(receivingTimeout,[Default]), UsedName(OneSecondTimeMachine,[Default]), UsedName(persisting,[Default]), UsedName(secondaries,[Default]), UsedName(update,[Default]), UsedName(replicationClients,[Default]), UsedName(persistence,[Default]), UsedName(replicasToReplicators,[Default]), UsedName(getting,[Default]), UsedName(updatePending,[Default]), UsedName(persist,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(kvstore.Replica)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from kvstore.Replica_bak.OperationReply...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(kvstore.Replica_bak.OperationReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(kvstore.Replica_bak.OperationReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(kvstore.Replica_bak.OperationReply,ModifiedNames(changes = UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(OperationReply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The kvstore.Replica_bak.OperationReply has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(OperationReply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(kvstore.Replica_bak.OperationReply)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from kvstore.Replica_bak...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(kvstore.Replica_bak)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(kvstore.Replica_bak)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(kvstore.Replica_bak,ModifiedNames(changes = UsedName(!=,[Default]), UsedName(receivingGet,[Default]), UsedName(equals,[Default]), UsedName(cancellable,[Default]), UsedName(toString,[Default]), UsedName(receivingReplicas,[Default]), UsedName(getClass,[Default]), UsedName(Get,[Default]), UsedName(leader,[Default]), UsedName(resolvePending,[Default]), UsedName(finalize,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(Remove,[Default]), UsedName(replica,[Default]), UsedName(OperationFailed,[Default]), UsedName(aroundReceive,[Default]), UsedName(kv,[Default]), UsedName(arbiter,[Default]), UsedName(replicating,[Default]), UsedName(isInstanceOf,[Default]), UsedName(pendingRequests,[Default]), UsedName(self,[Implicit]), UsedName(unhandled,[Default]), UsedName(postRestart,[Default]), UsedName(receivingTimeout,[Default]), UsedName(GetResult,[Default]), UsedName(OperationAck,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(context,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(persisting,[Default]), UsedName(eq,[Default]), UsedName(props,[Default]), UsedName(OperationReply,[Default]), UsedName(kvstore;Replica_bak;init;,[Default]), UsedName(expectedSeq,[Default]), UsedName($asInstanceOf,[Default]), UsedName(preStart,[Default]), UsedName(persistence,[Default]), UsedName(preRestart,[Default]), UsedName(Operation,[Default]), UsedName(Receive,[Default]), UsedName(aroundPreStart,[Default]), UsedName(Insert,[Default]), UsedName(Replica_bak,[Default]), UsedName(replicasToReplicators,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(aroundPostStop,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(receive,[Default]), UsedName(updatePending,[Default]), UsedName(sender,[Default]), UsedName(==,[Default]), UsedName(notifyAll,[Default]), UsedName(postStop,[Default]))) invalidates 1 classes due to The kvstore.Replica_bak has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(self,[Implicit]), UsedName(context,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(kvstore.Replica_bak)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from kvstore.Replica_bak.OperationAck...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(kvstore.Replica_bak.OperationAck)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(kvstore.Replica_bak.OperationAck)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(kvstore.Replica_bak.OperationAck,ModifiedNames(changes = UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isInstanceOf,[Default]), UsedName(OperationAck,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(andThen,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(kvstore;Replica_bak;OperationAck;init;,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The kvstore.Replica_bak.OperationAck has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(compose,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isInstanceOf,[Default]), UsedName(OperationAck,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(andThen,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(kvstore;Replica_bak;OperationAck;init;,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(kvstore.Replica_bak.OperationAck)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from kvstore.Replica_bak.Operation...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(kvstore.Replica_bak.Operation)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(kvstore.Replica_bak.Operation)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(kvstore.Replica_bak.Operation,ModifiedNames(changes = UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(key,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Operation,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The kvstore.Replica_bak.Operation has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(key,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Operation,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(kvstore.Replica_bak.Operation)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from kvstore.Replica_bak.GetResult...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(kvstore.Replica_bak.GetResult)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(kvstore.Replica_bak.GetResult)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(kvstore.Replica_bak.GetResult,ModifiedNames(changes = UsedName(copy$default$2,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(valueOption,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GetResult,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(key,[Default]), UsedName(productElement,[Default]), UsedName(kvstore;Replica_bak;GetResult;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(curried,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(copy$default$3,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The kvstore.Replica_bak.GetResult has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy$default$2,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(valueOption,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GetResult,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(key,[Default]), UsedName(productElement,[Default]), UsedName(kvstore;Replica_bak;GetResult;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(curried,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(copy$default$3,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(kvstore.Replica_bak.GetResult)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from kvstore.Replica_bak.Get...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(kvstore.Replica_bak.Get)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(kvstore.Replica_bak.Get)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(kvstore.Replica_bak.Get,ModifiedNames(changes = UsedName(copy$default$2,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(kvstore;Replica_bak;Get;init;,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(Get,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(key,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(curried,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The kvstore.Replica_bak.Get has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(copy$default$2,[Default]), UsedName(tupled,[Default]), UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(kvstore;Replica_bak;Get;init;,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(Get,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(key,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(curried,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(kvstore.Replica_bak.Get)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from kvstore.Replica_bak.OperationFailed...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(kvstore.Replica_bak.OperationFailed)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(kvstore.Replica_bak.OperationFailed)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(kvstore.Replica_bak.OperationFailed,ModifiedNames(changes = UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(kvstore;Replica_bak;OperationFailed;init;,[Default]), UsedName(compose,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(OperationFailed,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(andThen,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The kvstore.Replica_bak.OperationFailed has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(!=,[Default]), UsedName(equals,[Default]), UsedName(id,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(kvstore;Replica_bak;OperationFailed;init;,[Default]), UsedName(compose,[Default]), UsedName(copy,[Default]), UsedName(productArity,[Default]), UsedName(OperationFailed,[Default]), UsedName(isInstanceOf,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(productElement,[Default]), UsedName($isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(unapply,[Default]), UsedName(andThen,[Default]), UsedName(copy$default$1,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName($init$,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(productIterator,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(kvstore.Replica_bak.OperationFailed)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
